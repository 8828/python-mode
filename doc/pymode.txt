*pymode.txt*  *python-mode.txt*  Python-mode for vim!

     ____  _  _  ____  _   _  _____  _  _     __  __  _____  ____  ____      ~
    (  _ \( \/ )(_  _)( )_( )(  _  )( \( )___(  \/  )(  _  )(  _ \( ___)     ~
     )___/ \  /   )(   ) _ (  )(_)(  )  ((___))    (  )(_)(  )(_) ))__)      ~
    (__)   (__)  (__) (_) (_)(_____)(_)\_)   (_/\/\_)(_____)(____/(____)     ~


                          Version: 0.7.0

==============================================================================
CONTENTS                                                       *pymode-contents*

    1.Intro.......................................................|pymode-intro|
    2.Common functionality.......................................|pymode-common|
        2.1 Python version...............................|pymode-python-version|
        2.2 Python indentation...................................|pymode-indent|
        2.3 Python folding......................................|pymode-folding|
        2.4 Vim motion...........................................|pymode-motion|
        2.5 Show documentation............................|pymode-documentation|
        2.6 Support virtualenv...............................|pymode-virtualenv|
        2.7 Run code................................................|pymode-run|
        2.8 Breakpoints.....................................|pymode-breakpoints|
    3. Code checking...............................................|pymode-lint|
    4. Rope support................................................|pymode-rope|
        4.1 Code completion..................................|pymode-completion|
        4.2 Find definition.................................|pymode-rope-findit|

    2.Options.................................|PythonModeOptions|
        2.1.Customisation details.............|PythonModeOptionsDetails|
    3.Default Keys............................|PythonModeKeys|
    4.Commands................................|PythonModeCommands|
    5.FAQ.....................................|PythonModeFAQ|
    6.Credits.................................|PythonModeCredits|
    7.License.................................|PythonModeLicense|

==============================================================================
1. Intro ~
                                                                  *pymode-intro*

Python-mode is a vim plugin that allows you to use the pylint, rope, and pydoc
libraries in vim to provide features like python code bug checking,
refactoring, and some other useful things.

This plugin allows you to create python code in vim very easily. There is no
need to install the pylint or rope libraries on your system.

Python-mode containts all you need to develop python applications in Vim.

Features:                                                      *pymode-features*

- Support Python version 2.6+ and 3.2+
- Syntax highlighting
- Virtualenv support
- Run python code (``<leader>r``)
- Add/remove breakpoints (``<leader>b``)
- Improved Python indentation
- Python folding
- Python motions and operators (``]]``, ``3[[``, ``]]M``, ``vaC``, ``viM``, ``daC``, ``ciM``, ...)
- Code checking  (pylint_, pyflakes_, pylama_, ...) that can be run simultaneously (``:PymodeLint``)
- Autofix PEP8 errors (``:PymodeLintAuto``)
- Search in python documentation (``K``)
- Code refactoring <rope refactoring library> (rope_)
- Strong code completion (rope_)
- Go to definition (``<C-c>g`` for `:RopeGotoDefinition`)
- And more, more ...


==============================================================================
2. Common functionality ~
                                                                 *pymode-common*

This script provides the following options that can customise the behaviour of
PythonMode. These options should be set in your |vimrc|.

        Bellow shows the default values.


Turn on the whole plugin                                            *'g:pymode'*
>
    let g:pymode = 1

Trun off plugin's warnings                                 *'g:pymode_warnings'*
>
    let g:pymode_warnings = 1

Add paths to `sys.path`                                         *'g:pymode_paths'*
Value is list of path's strings. 
>
    let g:pymode_paths = []

Trim unused whitespaces on save                    *'g:pymode_trim_whitespaces'*
>
    let g:pymode_trim_whitespaces = 1

Setup default python options                                *'g:pymode_options'*
>
    let g:pymode_options = 1

Setup pymode |quickfix| window

                    *'g:pymode_quickfix_maxheght'* *'g:pymode_quickfix_minheight'*
>
    let g:pymode_quickfix_minheight = 3
    let g:pymode_quickfix_maxheight = 6

------------------------------------------------------------------------------
2.1. Python version ~
                                                         *pymode-python-version*

By default pymode looks for current python version supported in your Vim. 
You could choose prefer version, but value will be testsed on loading.

                                                             *'g:pymode_python'* 
>
    let g:pymode_python = 'python'

Values are `python`, `python3`, `disable`. If value set to `disable` most
python-features of **pymode** will be disabled.

------------------------------------------------------------------------------
2.2 Python indentation ~
                                                                 *pymode-indent*

Pymode support PEP8-compatible python indent.
Enable pymode indentatation                                  *'g:pymode_indent'*
>
    let g:pymode_indent = []

------------------------------------------------------------------------------
2.3 Python folding ~
                                                                *pymode-folding*

Fast and usual python folding in Vim.
Enable pymode folding                                       *'g:pymode_folding'*
>
    let g:pymode_folding = 1

------------------------------------------------------------------------------
2.4 Vim motion ~
                                                                *pymode-motion*

Support Vim motion (See |operator|) for python objects (such as functions,
class and methods).

`C` — means class
`M` — means method or function
                                                            *pymode-motion-keys*

``[[``         Jump to previous class or function (normal, visual, operator modes)
``]]``         Jump to next class or function  (normal, visual, operator modes)
``[M``         Jump to previous class or method (normal, visual, operator modes)
``]M``         Jump to next class or method (normal, visual, operator modes)
``aC``, ``C``    Select a class. Ex: ``vaC``, ``daC``, ``dC``, ``yaC``, ``yC``, ``caC``, ``cC`` (normal, operator modes)
``iC``         Select inner class. Ex: ``viC``, ``diC``, ``yiC``, ``ciC`` (normal, operator modes)
``aM``, ``M``    Select a function or method. Ex: ``vaM``, ``daM``, ``dM``, ``yaM``, ``yM``, ``caM``, ``cM`` (normal, operator modes)
``iM``         Select inner function or method. Ex: ``viM``, ``diM``, ``yiM``, ``ciM`` (normal, operator modes)

Enable pymode-motion                                         *'g:pymode_motion'*
>
    let g:pymode_motion = 1

------------------------------------------------------------------------------
2.5 Show documentation ~
                                                          *pymode-documentation*

Pymode could show documetation for current word by `pydoc`.

Commands:
*:PymodeDoc* <args> — show documentation 

Turns on the documentation script                               *'g:pymode_doc'*
>
    let g:pymode_doc = 1

Bind keys to show documentation for current word (selection) *'g:pymode_doc_bind'*
>
    let g:pymode_doc_bind = 'K'

------------------------------------------------------------------------------
2.6 Support virtualenv ~
                                                             *pymode-virtualenv*

Enable virtualenv detection                               *'g:pymode_virtualenv'*
>
    let g:pymode_virtualenv = 1

Set path to virtualenv by manually                   *'g:pymode_virtualenv_path'*
>
    let g:pymode_virtualenv_path = $VIRTUAL_ENV

------------------------------------------------------------------------------
2.7 Run code ~
                                                                    *pymode-run*

Commands:
*:PymodeRun* -- Run current buffer or selection

Turn on the run code script                                     *'g:pymode_run'*
>
    let g:pymode_run = 1

Binds keys to run python code                              *'g:pymode_run_bind'*
>
    let g:pymode_run_bind = '<leader>r'

------------------------------------------------------------------------------
2.8 Breakpoints ~
                                                            *pymode-breakpoints*

Pymode automatically detect available debugger (like pdb, ipdb, pudb) and user
could set/unset breakpoint with one key and without code checking and etc.

Enable functionality                                     *'g:pymode_breakpoint'*
>
    let g:pymode_breakpoint = 1

Bind keys
>
    let g:pymode_breakpoint_bind = '<leader>b'

Manually set breakpoint command (leave empty for automatic detection)
>
    let g:pymode_breakpoint_cmd = ''


==============================================================================
3. Code checking ~
                                                                   *pymode-lint*

Pymode supports `pylint`, `pep257`, `pep8`, `pyflakes`, `mccabe` code
checkers. You could run several checkers are simular.

        Pymode uses Pylama library for code checking. Many options like skip
        files, errors and etc could be defined in `pylama.ini` file or modelines.
        Check Pylama documentation for details.

        Pylint options (ex. disable messages) may be defined in `$HOME/pylint.rc`
        See pylint documentation.

Commands:
*:PymodeLint* -- Check code in current buffer
*:PymodeLintToggle* -- Toggle code checking
*:PymodeLintAuto* -- Fix PEP8 errors in current buffer automatically

Turn on code checking                                          *'g:pymode_lint'*
>
    let g:pymode_lint = 1

Check code on every save (if file has been modified)  *'g:pymode_lint_on_write'*
>
    let g:pymode_lint_on_write = 1

Check code when editting (onfly)                        *'g:pymode_lint_on_fly'*
>
    let g:pymode_lint_on_fly = 1

Show error message if cursor placed at the error line  *'g:pymode_lint_message'*
>
    let g:pymode_lint_message = 1

Default code checkers (you could set several)         *'g:pymode_lint_checkers'*
>
    let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']

Values may be choosen from: `pylint`, `pep8`, `mccabe`, `pep257`, `pyflakes`.

Skip errors and warnings                                *'g:pymode_lint_ignore'*
E.g. "E501,W002", "E2,W" (Skip all Warnings and Errors startswith E2) and etc
>
    let g:pymode_lint_ignore = "E501,W"

Select some error or warnings.                          *'g:pymode_lint_select'*
By example you disable all warnings starting from 'W', but want to see warning
'W0011' and warning 'W430'
>
    let g:pymode_lint_select = "E501,W0011,W430"

Auto open cwindow (quickfix) if any errors has been finded *'g:pymode_lint_cwindow'*
>
    let g:pymode_lint_cwindow = 1

Place error |signs|                                             *'g:pymode_signs'*
>
    let g:pymode_lint_signs = 1

Definitions for |signs|
>
    let g:pymode_lint_todo_symbol = 'WW'
    let g:pymode_lint_comment_symbol = 'CC'
    let g:pymode_lint_visual_symbol = 'RR'
    let g:pymode_lint_error_symbol = 'EE'
    let g:pymode_lint_info_symbol = 'II'
    let g:pymode_lint_pyflakes_symbol = 'FF'


==============================================================================
3. Rope support ~
                                                                   *pymode-rope*

Pymode support Rope refactoring operations, code completion and code assists.

Commands:
*:PymodeRopeAutoImport* -- Autoimport used modules
*:PymodeRopeModuleToPackage* -- Convert current module to package
*:PymodeRopeNewProject* -- Open new Rope project in current working directory
*:PymodeRopeRedo* -- Redo changes from last refactoring
*:PymodeRopeRegenerate* -- Regenerate the project cache
*:PymodeRopeRenameModule* -- Rename current module
*:PymodeRopeUndo* -- Undo changes from last refactoring


Turn on the rope script                                        *'g:pymode_rope'*
>
    let g:pymode_rope = 1

------------------------------------------------------------------------------
4.1 Completion ~
                                                             *pymode-completion*

By default you could typing <Ctrl-Space> for autocompletion. Will be
automatically selected first entry and you can press <Return> to insert in
your code. <C-X><C-O> and <C-P>/<C-N> works too.

Autocompletion is also called by typing a period in |Insert| mode.


Turn on code completion support in the plugin       *'g:pymode_rope_completion'*
>
    let g:pymode_rope_completion = 1

Turn on autocompletion when you typing a period *'g:pymode_rope_complete_on_dot'*
>
    let g:pymode_rope_complete_on_dot = 1

Keymap for autocomplete                        *'g:pymode_rope_completion_bind'*
>
    let g:pymode_rope_completion_bind = '<C-Space>'

------------------------------------------------------------------------------
4.2 Find definition ~
                                                            *pymode-rope-findit*

By default when you press *<C-C>g* on any object in your code you will be moved
to definition.                            *'g:pymode_rope_goto_definition_bind'*
>
    let g:pymode_rope_goto_definition_bind = '<C-c>g'

Command for open window when definition has been finded *'g:pymode_rope_goto_definition_cmd'*
Values are (`e`, `new`, `vnew`)
>
    let g:pymode_rope_goto_definition_cmd = 'new'





|'pymode_syntax'|                   Turns off the custom syntax highlighting

|'pymode_syntax_all'|               Enable all hightlight groups

|'pymode_syntax_print_as_function'| Hightlight `print` as function

|'pymode_syntax_highlight_equal_operator'| Hightlight `=`

|'pymode_syntax_highlight_stars_operator'| Hightlight `*`

|'pymode_syntax_highlight_self'|    Hightlight `self`

|'pymode_syntax_indent_errors'|     Hightlight indentation errors

|'pymode_syntax_space_errors'|      Hightlight trailing spaces as errors

|'pymode_syntax_string_formating'|  Hightlight string formating

|'pymode_syntax_string_format'|     Hightlight Str.format syntax

|'pymode_syntax_string_templates'|  Hightlight string templates

|'pymode_syntax_doc_tests'|         Hightlight doctests

|'pymode_syntax_builtin_objs'|      Hightlight builtin objects

|'pymode_syntax_builtin_types'|     Hightlight builtin types

|'pymode_syntax_builtin_functions'| Hightlight builtin functions

|'pymode_syntax_highlight_exceptions'| Hightlight builtin exceptions

|'pymode_indent'|                   Enable/Disable pymode PEP8 indentation

|'pymode_options'|                  Set default pymode options for
                                  python codding

|'pymode_motion'|                   Enable pymode motion stuff

        Note:
        Also see |ropevim.txt|


------------------------------------------------------------------------------
2.1. Customisation details ~
                                                      *PythonModeOptionsDetails*

To enable any of the options below you should put the given line in your
'$HOME/.vimrc'. See |vimrc-intro|.

------------------------------------------------------------------------------
                                                                      *'pymode'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then the whole plugin is disabled

------------------------------------------------------------------------------
                                                                *'pymode_paths'*
Values: List of strings
Default: [].

This option sets additional python import paths

------------------------------------------------------------------------------
                                                                  *'pymode_doc'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then the doc script is disabled.

------------------------------------------------------------------------------
                                                              *'pymode_doc_key'*
Default: 'K'.

Set the key to show the show python documentation.

------------------------------------------------------------------------------
                                                                  *'pymode_run'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then the run script is disabled.

------------------------------------------------------------------------------
                                                              *'pymode_run_key'*
Default: '<leader>r'.

Set the key for running python code.

------------------------------------------------------------------------------
                                                                 *'pymode_lint'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then the pylint script is disabled.

------------------------------------------------------------------------------
                                                         *'pymode_lint_checker'*
Values: "pylint", "pyflakes", "pep8", "mccabe", "pep257"
        You can set many checkers. E.g. "pyflakes,pep8,mccabe" ~

Default: "pyflakes,pep8,mccabe".

This option sets code checkers.

------------------------------------------------------------------------------
                                                          *'pymode_lint_ignore'*
Values: IDs of errors, separated by commas or empty strings
        E.g. "E501,W002", "E2,W" (Skip all Warnings and Errors startswith E2) and etc ~

Default: "".

Skip errors and warnings.
See also: |'pymode_lint_select'|, |'pymode_lint_config'|

------------------------------------------------------------------------------
                                                         *'pymode_lint_select'*
Values: IDs of errors, separated by commas or empty strings
        E.g. "W002,C" Force W002 and all C-ids ~

Default: "".

Select errors and warnings.
See also: |'pymode_lint_ignore'|, |'pymode_lint_config'|

------------------------------------------------------------------------------
                                                           *'pymode_lint_onfly'*
Values: 0 or 1
Default: 0

This option enables "on the fly" code checking

------------------------------------------------------------------------------
                                                          *'pymode_lint_config'*
Values: 'Path to pylint configuration file'
Default: "$HOME/.pylintrc"

This option sets the path to the pylint configuration file. If the
file is not found, use the 'pylintrc' file from python-mode sources.

See also: |'pymode_lint_ignore'|, |'pymode_lint_select'|

------------------------------------------------------------------------------
                                                           *'pymode_lint_write'*
Values: 0 or 1.
Default: 1.

If this option is set to 0, then pylint auto-checking on every save is
disabled.

------------------------------------------------------------------------------
                                                         *'pymode_lint_cwindow'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then pylint will not show cwindow.

------------------------------------------------------------------------------
                                                         *'pymode_lint_message'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then pylint will not show errors at bottom.

------------------------------------------------------------------------------
                                                           *'pymode_lint_signs'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then pylint will not place error signs.

------------------------------------------------------------------------------
                                                     *'pymode_lint_todo_symbol'*
Values: Symbol for todo signs.
Default: "WW".

This option sets the symbol to use in the gutter to display todo signs.

------------------------------------------------------------------------------
                                                  *'pymode_lint_comment_symbol'*
Values: Symbol for comment signs.
Default: "CC".

This option sets the symbol to use in the gutter to display comment signs.

------------------------------------------------------------------------------
                                                   *'pymode_lint_visual_symbol'*
Values: Symbol for visual signs.
Default: "RR".

This option sets the symbol to use in the gutter to display visual signs.

------------------------------------------------------------------------------
                                                    *'pymode_lint_error_symbol'*
Values: Symbol for error signs.
Default: "EE".

This option sets the symbol to use in the gutter to display error signs.

------------------------------------------------------------------------------
                                                     *'pymode_lint_info_symbol'*
Values: Symbol for info signs.
Default: "II".

This option sets the symbol to use in the gutter to display info signs.

------------------------------------------------------------------------------
                                                 *'pymode_lint_pyflakes_symbol'*
Values: Symbol for PyFlakes' info signs.
Default: "FF".

This option sets the symbol to use in the gutter to display PyFlakes' info
signs.

------------------------------------------------------------------------------
                                                            *'pymode_lint_jump'*
Values: 0 or 1.
Default: 0.

If this option is set to 0 then pylint will not jump to the first error.

------------------------------------------------------------------------------
                                                            *'pymode_lint_hold'*
Values: 0 or 1.
Default: 0.

If this option is set to 0 then pylint will switch on the quickfix window when
it opens. Doesn't work when |'pymode_lint_jump'| is enabled.

------------------------------------------------------------------------------
                                                       *'pymode_lint_minheight'*
Values: int
Default: 3.

Set minimal height for the pylint cwindow.

------------------------------------------------------------------------------
                                               *'pymode_lint_mccabe_complexity'*
Values: int
Default: 8.

Set minimal complexity for the mccabe linter.

------------------------------------------------------------------------------
                                                       *'pymode_lint_maxheight'*
Values: int
Default: 6.

Set maximal height for the pylint cwindow.

------------------------------------------------------------------------------
                                                                 *'pymode_rope'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then the rope script is disabled.

------------------------------------------------------------------------------
                                                           *'pymode_breakpoint'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then the breakpoint script is disabled.

------------------------------------------------------------------------------
                                                       *'pymode_breakpoint_key'*
Default: '<leader>b'.

Key for setting/unsetting breakpoints.

------------------------------------------------------------------------------
                                                           *'pymode_virtualenv'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then virtualenv support is disabled.

------------------------------------------------------------------------------
                                                    *'pymode_utils_whitespaces'*
Values: 0 or 1.
Default: 1.

Auto-remove unused whitespaces.

------------------------------------------------------------------------------
                                                               *'pymode_syntax'*
Values: 0 or 1.
Default: 1.

If this option is set to 0 then the custom syntax highlighting will
not be used.

------------------------------------------------------------------------------
                                                           *'pymode_syntax_all'*
Values: 0 or 1.
Default: 1.

Enabling all hightlight groups.

------------------------------------------------------------------------------
                                             *'pymode_syntax_print_as_function'*
Values: 0 or 1.
Default: 0.

Hightlight `print` as function

------------------------------------------------------------------------------
                                      *'pymode_syntax_highlight_equal_operator'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight `=`

------------------------------------------------------------------------------
                                      *'pymode_syntax_highlight_stars_operator'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight `*`

------------------------------------------------------------------------------
                                                 *'pymode_syntax_highlight_self'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight `self`

------------------------------------------------------------------------------
                                                 *'pymode_syntax_indent_errors'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight indentation errors

------------------------------------------------------------------------------
                                                  *'pymode_syntax_space_errors'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight trailing spaces as errors

------------------------------------------------------------------------------
                                              *'pymode_syntax_string_formating'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight string formating

------------------------------------------------------------------------------
                                              *'pymode_syntax_string_format'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight Str.format syntax

------------------------------------------------------------------------------
                                              *'pymode_syntax_string_templates'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight string templates

------------------------------------------------------------------------------
                                               *'pymode_syntax_string_doctests'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight doctests

------------------------------------------------------------------------------
                                                  *'pymode_syntax_builtin_objs'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight builtin objects

------------------------------------------------------------------------------
                                                 *'pymode_syntax_builtin_types'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight builtin types

------------------------------------------------------------------------------
                                             *'pymode_syntax_builtin_functions'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight builtin functions

------------------------------------------------------------------------------
                                          *'pymode_syntax_highlight_exceptions'*
Values: 0 or 1.
Default: |'pymode_syntax_all'|.

Hightlight builtin exceptions

------------------------------------------------------------------------------
                                                               *'pymode_indent'*
Values: 0 or 1.
Default: 1.

If this option is set to 1, pymode will enable python indentation support.

------------------------------------------------------------------------------
                                                              *'pymode_folding'*
Values: 0 or 1.
Default: 1.

If this option is set to 1, pymode will enable python-folding.

------------------------------------------------------------------------------
                                                              *'pymode_options'*
Values: 0 or 1.
Default: 1.

If this option is set to 1, pymode will enable the following options for python
buffers: >

    setlocal complete+=t
    setlocal formatoptions-=t
    setlocal number
    setlocal nowrap
    setlocal textwidth=80
    setlocal commentstring=#%s
<
------------------------------------------------------------------------------
                                                               *'pymode_motion'*
Values: 0 or 1.
Default: 1.

If this option is set to 1, pymode will enable some python motions.
Pymode-motion is beta.

================  ============================
Key               Command
================  ============================
[[                Jump to previous class or function (normal, visual, operator modes)
]]                Jump to next class or function  (normal, visual, operator modes)
[M                Jump to previous class or method (normal, visual, operator modes)
]M                Jump to next class or method (normal, visual, operator modes)
aC                Select a class. Ex: vaC, daC, yaC, caC (normal, operator modes)
iC                Select inner class. Ex: viC, diC, yiC, ciC (normal, operator modes)
aM                Select a function or method. Ex: vaM, daM, yaM, caM (normal, operator modes)
iM                Select inner function or method. Ex: viM, diM, yiM, ciM (normal, operator modes)
================  ============================


==============================================================================
3. Default Keys ~
                                                                *PythonModeKeys*

To redefine keys, see: |PythonModeOptions|

================  ============================
Key               Command
================  ============================
K                 Show python docs for current word under cursor (`g:pymode_doc_key`)
C-Space           Rope code assist (`g:pymode_rope_autocomplete_map`)
<leader>r         Run current buffer (`g:pymode_run_key`)
<leader>b         Set breakpoints (`g:pymode_breakpoint_key`)
[[                Jump to previous class or function (normal, visual, operator modes)
]]                Jump to next class or function  (normal, visual, operator modes)
[M                Jump to previous class or method (normal, visual, operator modes)
]M                Jump to next class or method (normal, visual, operator modes)
aC C              Operation with a class.
                  Ex: vaC, daC, dC, yaC, yC, caC, cC (normal, operator modes)
iC                Operation with inner class.
                  Ex: viC, diC, yiC, ciC (normal, operator modes)
aM M              Operation with function or method.
                  Ex: vaM, daM, dM, yaM, yM, caM, cM (normal, operator modes)
iM                Operation with inner function or method.
                  Ex: viM, diM, yiM, ciM (normal, operator modes)
================  ============================

	Note:
        Also see: |RopeShortcuts|


==============================================================================
4. Commands ~
                                                            *PythonModeCommands*

*:Pydoc* <args>                                                            *Pydoc*
    Show python documentation

*:PyLintToggle*                                                     *PyLintToggle*
    Enable, disable pylint

*:PyLint*                                                                 *PyLint*
    Check current buffer

*:PyLintAuto*                                                         *PyLintAuto*
    Automatically fix PEP8 errors in the current buffer

*:Pyrun*                                                                   *Pyrun*
    Run current buffer


==============================================================================
5. FAQ ~
                                                                 *PythonModeFAQ*

Python-mode doesn't work
------------------------

Open any python file and run ":call pymode#troubleshooting#Test()",
fix the warning or send me the output.


Rope completion is very slow
----------------------------

To work, rope_ creates a service directory: `.ropeproject`.  If
|'pymode_rope_guess_project'| is set on (as it is by default) and
`.ropeproject` is not found in the current dir, rope will scan for
`.ropeproject` in every dir in the parent path.  If rope finds `.ropeproject`
in parent dirs, rope sets projectis for all child dirs and the scan may be
slow for many dirs and files.

Solutions:

- Disable |'pymode_rope_guess_project'| to make rope always create
  `.ropeproject` in the current dir.
- Delete `.ropeproject` from the parent dir to make rope create `.ropeproject`
  in the current dir.
- Press `<C-x>po` or `:RopeOpenProject` to force rope to create `.ropeproject`
  in the current dir.


Pylint check is very slow
-------------------------

In some projects pylint_ may check slowly, because it also scans imported
modules if possible.  Try using pyflakes: see |'pymode_lint_checker'|.

You may set |exrc| and |secure| in your |vimrc| to auto-set custom settings
from `.vimrc` from your projects directories.
>
    Example: On Flask projects I automatically set
             'g:pymode_lint_checker = "pyflakes"'.
             On Django 'g:pymode_lint_checker = "pylint"'
<

OSX cannot import urandom
-------------------------

See: https://groups.google.com/forum/?fromgroups=#!topic/vim_dev/2NXKF6kDONo

The sequence of commands that fixed this:
>
    brew unlink python
    brew unlink macvim
    brew remove macvim
    brew install -v --force macvim
    brew link macvim
    brew link python
<

==============================================================================
6. Credits ~
                                                             *PythonModeCredits*
    Kirill Klenov
        http://klen.github.com/
        http://github.com/klen/

    Rope
        Copyright (C) 2006-2010 Ali Gholami Rudi
        Copyright (C) 2009-2010 Anton Gritsay

    Pylint
        Copyright (C) 2003-2011 LOGILAB S.A. (Paris, FRANCE).
        http://www.logilab.fr/

    Pyflakes:
        Copyright (c) 2005 Divmod, Inc.
        http://www.divmod.com/

    PEP8:
        Copyright (c) 2006 Johann C. Rocholl <johann@rocholl.net>
        http://github.com/jcrocholl/pep8

    autopep8:
        Copyright (c) 2012 hhatto <hhatto.jp@gmail.com>
        https://github.com/hhatto/autopep8

    Python syntax for vim:
        Copyright (c) 2010 Dmitry Vasiliev
        http://www.hlabs.spb.ru/vim/python.vim

    PEP8 VIM indentation
        Copyright (c) 2012 Hynek Schlawack <hs@ox.cx>
        http://github.com/hynek/vim-python-pep8-indent


==============================================================================
7. License ~
                                                             *PythonModeLicense*

Python-mode is released under the GNU lesser general public license.
See: http://www.gnu.org/copyleft/lesser.html

If you like this plugin, you can send me a postcard :)
My address is: "Russia, 143401, Krasnogorsk, Shkolnaya 1-19" to "Kirill Klenov".
Thanks for your support!


------------------------------------------------------------------------------

 vim:tw=78:ts=8:ft=help:norl:
